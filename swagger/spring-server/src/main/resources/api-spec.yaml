swagger: '2.0'
info:
  version: '0.1.0'
  title: Gametown API
  description: An API for Gamification
host: localhost:8080
basePath: /api
schemes:
- http
paths:
  /badges:
    get:
      description: get the list of all badges
      operationId: getBadges
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
    post:
      description: create new badge
      operationId: createBadge
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: badge
        required: true
        schema:
          $ref: '#/definitions/Badge'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Badge'
    patch:
      description: update badge
      operationId: updateBadge
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: badge
        required: true
        schema:
          $ref: '#/definitions/Badge'
      responses:
        '204':
          description: updated successfully
          schema:
            $ref: '#/definitions/Badge'
    delete:
      description: remove badge
      operationId: deleteBadge
      consumes:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: badge
        schema:
          $ref: '#/definitions/Badge'
      responses:
        '202':
          description: marked for deletion

  /pointScales:
    get:
      description: get the list of all Point Scales
      operationId: getPointScales
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/PointScale'
    post:
      description: create new Point Scale
      operationId: createPointScale
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: pointScale
        required: true
        schema:
          $ref: '#/definitions/PointScale'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/PointScale'
    patch:
      description: update Point Scale
      operationId: updatePointScale
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: pointScale
        required: true
        schema:
          $ref: '#/definitions/PointScale'
      responses:
        '204':
          description: updated successfully
          schema:
            $ref: '#/definitions/PointScale'
    delete:
      description: remove Point Scale
      operationId: deletePointScale
      consumes:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: pointScale
        schema:
          $ref: '#/definitions/PointScale'
      responses:
        '202':
          description: marked for deletion

  /rules:
    get:
      description: get the list of all Rules
      operationId: getRules
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
    post:
      description: create new Rule
      operationId: createRule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/Rule'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Rule'
    patch:
      description: update Rule
      operationId: updateRule
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/Rule'
      responses:
        '204':
          description: updated successfully
          schema:
            $ref: '#/definitions/Rule'
    delete:
      description: remove Rule
      operationId: deleteRule
      consumes:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: rule
        schema:
          $ref: '#/definitions/Rule'
      responses:
        '202':
          description: marked for deletion

  /events:
    post:
      description: creat event for user
      operationId: newEvent
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        '201':
          description: success
          schema:
            $ref: '#/definitions/Event'
  /users:
    get:
      description: get the list of all users
      operationId: getUsers
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /users/{userId}:
    get:
      description: get a user
      operationId: getUser
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: path
        name: userId
        required: true
        type: integer
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/User'
  /users/{userId}/badges:
    get:
      description: get a user's badge list
      operationId: getUserBadges
      produces:
      - application/json
      parameters:
      - in: header
        name: apiKey
        required: true
        type: string
      - in: path
        name: userId
        required: true
        type: integer
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
  Badge:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      active:
        type: boolean
  PointScale:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      active:
        type: boolean
  Rule:
    type: object
    properties:
      id:
        type: integer
      value:
        type: string
      active:
        type: boolean
      badge:
        $ref: '#/definitions/Badge'
      pointScale:
        $ref: '#/definitions/PointScale'
      nbrPoints:
        type: integer
  Event:
    type: object
    properties:
      id:
        type: integer
      user:
        $ref: '#/definitions/User'
      event:
        type: string
      description :
        type: string